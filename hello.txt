package ll;

public class LinkedList {

	// Privat klass med enda syfte att hålla koll på noder åt listan.
	private static class Node {

		private Node next, prev;
		private int value;
		private String descr;

		private Node(int value, String descr) {
			this.value = value;
			this.descr = descr;
		}

	}

	private Node root;
	private int size;

	public LinkedList(int value, String descr) {
		this.root = new Node(value, descr);
		this.size = 0;
	}
	//dummy constructor om man bara vill skapa listan för att sedan sätta in data.
	public LinkedList() {
		this.size = 0;
	}
	//sätter in i slutet av listan en ny nod.
	public void add(int value, String descr) {
		Node newNode = new Node(value, descr);
		if (size == 0) {
			root = newNode;
		} else {
			//Skapar ett alias till roten så att ändringar på temp kommer skapa ändringar på root.
			Node temp = root;
			while (temp.next != null) {
				temp = temp.next;
			}
			newNode.prev = temp;
			temp.next = newNode;
		}
		size += 1;

	}

	public void remove() {
		if (size <= 0) {
			throw new Error("Kan int ta bort något från ngt tomt.");
		} else if (size == 1) {
			// still same list but throwing away the pointer for the root.
			root = null;
			size = 0;
		} else {
			//Likt tidigare, skapar en root alias så att ändringar på temp gör ändringar på root.
			Node temp = root;
			while (temp.next != null) {
				temp = temp.next;
			}
			temp.prev.next = null;
			size -= 1;
		}
	}

	public void showList() {
		String res = "";
		//Om man ska köra seriöst ska man göra en egen iterator klass, kan visa ett sådant ex om du vill se det :D
		//de ska tydligen vara väldigt nyttigt då när man kan det kan man göra vilka data kontainrar man vill och kan därav itterera över dem hur man vill typ hoppa flera steg om man vill det etc. 
		Node temp = root;
		while (temp.next != null) {
			res += "Node descr: " + temp.descr + " , value : " + temp.value + "\n";
			temp = temp.next;
		}
		// För den sista noden som annars kommer att skippas.
		res += "Node descr: " + temp.descr + " , value : " + temp.value + "\n";
		System.out.println(res);
	}

	public static void main(String[] args) {
		LinkedList t = new LinkedList();
		t.add(0, "test0");
		t.add(1, "test1");
		t.add(2, "test2");
		t.add(3, "test3");
		t.remove();
		t.add(4, "test4");
		t.add(5, "test5");
		t.add(6, "test6");
		t.remove();
		t.remove();
		t.showList();

	}
}

